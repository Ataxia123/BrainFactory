{
	"nodes":[
		{"id":"167d3b7b2f6f548d","type":"group","x":-460,"y":400,"width":1004,"height":660,"label":"Limiting chat messages"},
		{"id":"ec1597e4e7f3530c","type":"group","x":-209,"y":-208,"width":290,"height":348,"label":"Chat arrows"},
		{"id":"09ce49517baf7eda","type":"text","text":"","x":-189,"y":-60,"width":250,"height":60,"color":"4"},
		{"id":"b90c7fbfa70e4300","type":"text","text":"{{NOTE}}","x":-189,"y":60,"width":250,"height":60,"color":"6"},
		{"id":"4857524edbae8263","type":"text","text":"This chat arrow will parse the contents of the reference node into an array of messages","x":100,"y":-147,"width":380,"height":87},
		{"id":"ef3cdc2a117f9156","type":"text","text":"{{NOTE}}","x":-330,"y":420,"width":250,"height":60,"color":"6"},
		{"id":"82ba7993840f1760","type":"text","text":"","x":-330,"y":568,"width":250,"height":60,"color":"4"},
		{"id":"09a9d8dd0741d74b","type":"text","text":"","x":163,"y":568,"width":250,"height":60,"color":"4"},
		{"id":"9a309223d6ce3931","type":"text","text":"#### <u>Assistant</u>:\n// Example entry for a hackathon\nconst hackathonEntry: HackathonEntry = {\n    address: \"123 Main St\",\n    _id: \"abc123\",\n    hack: {\n        projectName: \"Hackathon Project\",\n        problemStatement: \"Solve this problem\",\n        solutionDescription: \"Our solution involves...\",\n        implementationDescription: \"We implemented this using...\",\n        technologyStack: [\"Node.js\", \"React\", \"MongoDB\"]\n    },\n    teamMembers: [\n        { name: \"John Doe\", email: \"john.doe@example.com\", role: \"Developer\" },\n        { name: \"Jane Smith\", email: \"jane.smith@example.com\", role: \"Designer\" }\n    ],\n    eval: [\n        {\n            coherenceScore: 4,\n            feasibilityScore: 3,\n            innovationScore: 5,\n            funScore: 4,\n            evaluationRemarks: \"Great job!\",\n            codeSnippets: [\n                { code: \"const x = 5\", comment: \"Declare a variable\", language: \"JavaScript\" }\n            ]\n        }\n    ],\n    progressUpdates: [\n        {\n            progress: \"Implemented feature X\",\n            wins: \"Fixed bug Y\",\n            losses: \"Encountered issue Z\",\n            gamePlan: \"Next steps...\",\n            actionItems: [\"Fix bug A\", \"Implement feature B\"],\n            codeSnippets: [\n                { code: \"const y = 10\", comment: \"Declare another variable\", language: \"JavaScript\" }\n            ]\n        }\n    ]\n};\n#### <u>User</u>:\nwhat did you just do?\n#### <u>Assistant</u>:\nI created an example entry for a hackathon. This entry contains information about the project, team members, evaluations, and progress updates for the hackathon project. It includes details such as the project name, problem statement, solution description, team members' roles, evaluation scores, progress updates, and code snippets related to the project. It's a structured way to document and track the progress of a hackathon project.\n#### Config\nmodel: gpt-3.5-turbo\ntemperature: 1\n\n","x":-440,"y":680,"width":471,"height":360,"color":"6"},
		{"id":"f2d8da368e1c51b6","type":"text","text":"#### <u>Assistant</u>:\n// Example entry for a hackathon\nconst hackathonEntry: HackathonEntry = {\n    address: \"123 Main St\",\n    _id: \"abc123\",\n    hack: {\n        projectName: \"Hackathon Project\",\n        problemStatement: \"Solve this problem\",\n        solutionDescription: \"Our solution involves...\",\n        implementationDescription: \"We implemented this using...\",\n        technologyStack: [\"Node.js\", \"React\", \"MongoDB\"]\n    },\n    teamMembers: [\n        { name: \"John Doe\", email: \"john.doe@example.com\", role: \"Developer\" },\n        { name: \"Jane Smith\", email: \"jane.smith@example.com\", role: \"Designer\" }\n    ],\n    eval: [\n        {\n            coherenceScore: 4,\n            feasibilityScore: 3,\n            innovationScore: 5,\n            funScore: 4,\n            evaluationRemarks: \"Great job!\",\n            codeSnippets: [\n                { code: \"const x = 5\", comment: \"Declare a variable\", language: \"JavaScript\" }\n            ]\n        }\n    ],\n    progressUpdates: [\n        {\n            progress: \"Implemented feature X\",\n            wins: \"Fixed bug Y\",\n            losses: \"Encountered issue Z\",\n            gamePlan: \"Next steps...\",\n            actionItems: [\"Fix bug A\", \"Implement feature B\"],\n            codeSnippets: [\n                { code: \"const y = 10\", comment: \"Declare another variable\", language: \"JavaScript\" }\n            ]\n        }\n    ]\n};\n#### <u>User</u>:\nwhat did you just do?\n#### <u>Assistant</u>:\nI provided an example entry for a hackathon project submission. It includes information about the project, team members, evaluations, progress updates, and code snippets. This entry can be used as a template or reference for documenting and tracking progress during a hackathon. Let me know if you have any specific questions or need further clarification!\n#### Config\nmodel: gpt-3.5-turbo\ntemperature: 1\n\n","x":53,"y":680,"width":471,"height":360,"color":"6"},
		{"id":"cd757b7484ffd798","type":"text","text":"{{NOTE}}","x":163,"y":420,"width":250,"height":60,"color":"6"},
		{"id":"d9739a4acdf10a34","type":"text","text":"This chat node is empty, so it will just send the previous messages it was given to the LLM","x":-610,"y":-86,"width":343,"height":106},
		{"id":"2b08e45e39b8eb39","type":"text","text":"This chat arrow will append the content of the response to the same note, as a stream.","x":100,"y":-30,"width":380,"height":120},
		{"id":"ce80fff3047872f3","type":"text","text":"The final chat arrow only sends the final response, so you can do anything you like with the space between the two chat arrows. \n\nUse this flexibility to build chatbots that send http requests, make decisions, edit notes, or gather relevant context.","x":-717,"y":60,"width":459,"height":200},
		{"id":"1097b1b80a3abe81","type":"text","text":"{{NOTE}}","x":-189,"y":-188,"width":250,"height":60,"color":"6"},
		{"id":"a8e6750d3ca80fff","type":"text","text":"This is a special reference node that references the note that was active when the cannoli was run.","x":-717,"y":-211,"width":450,"height":83},
		{"id":"2d01d9688ecbe4da","type":"text","text":"Green arrows are chat arrows. They can be used to build custom chatbots within obsidian using Cannoli.\n\nTry this by moving to a note, then running this cannoli using the \"4. Chat arrows\" command.","x":-277,"y":-440,"width":427,"height":180},
		{"id":"6ff1bc87ce822f42","x":-890,"y":489,"width":403,"height":218,"type":"text","text":"You can limit the number of messages parsed from a note by adding a number to the label.\n\nJust a number will limit the number of messages, and adding a \"#\" to the beginning of the label will limit based on an approximation of tokens. "},
		{"id":"2213c3caec2e3835","x":-800,"y":804,"width":315,"height":96,"type":"text","text":"The example on the left will send the most recent two messages from the note"},
		{"id":"fd4602caf5adb9bc","x":560,"y":508,"width":440,"height":90,"type":"text","text":"This chat arrow will send messages not exceeding the estimated token limit (but at least 1 message)"}
	],
	"edges":[
		{"id":"dddd3b587c8b7340","fromNode":"1097b1b80a3abe81","fromSide":"bottom","toNode":"09ce49517baf7eda","toSide":"top","color":"4"},
		{"id":"847946cb0fc14d7a","fromNode":"09ce49517baf7eda","fromSide":"bottom","toNode":"b90c7fbfa70e4300","toSide":"top","color":"4"},
		{"id":"8cc7de72b0881d19","fromNode":"ef3cdc2a117f9156","fromSide":"bottom","toNode":"82ba7993840f1760","toSide":"top","color":"4","label":"2"},
		{"id":"a738da5d15aa4bd8","fromNode":"82ba7993840f1760","fromSide":"bottom","toNode":"9a309223d6ce3931","toSide":"top","color":"2"},
		{"id":"b2376898a9f7d1f1","fromNode":"09a9d8dd0741d74b","fromSide":"bottom","toNode":"f2d8da368e1c51b6","toSide":"top","color":"2"},
		{"id":"9406dd17d5c41032","fromNode":"cd757b7484ffd798","fromSide":"bottom","toNode":"09a9d8dd0741d74b","toSide":"top","color":"4","label":"#500"}
	]
}